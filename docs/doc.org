#+title: Spheres-sounds
#+startup: indent showall
* dev

** starting up
- C-c M-j
- (require '[figwheel-sidecar-repl-api :as fw])
- (fw/start-figwheel!)
- (fw/cljs-repl)
then for the CSS that's in clj,-  M-x cider-connect-sibling-clj

** deployment
*** github-pages

- add a remote 'github' - git remote add github https://github.com/manandearth/spheres-rf-ha.git
- created a branch 'gh-pages' - git branch gh-pages
- checkout to it -  git checkout gh-pages
- need index.html at root with correct paths to css and js
- I had to comment out resources/public/resources/js from the .gitignore
- from the project.clj I had to delete ["garden" "once"] from the :preptasks
- lein clean
- lein cljsbuild once min
- git add . and git commit -m ""
- git push github gh-pages
- *ISSUE* - when I committed changed to the index.html in github website, I had to -> git pull github gh-pages

** cljs-bach

cljs-bach is required in the audio ns:

#+BEGIN_SRC clojure
(:require [cljs-bach.synthesis :refer [connect-> percussive adsr adshr sine square sawtooth add gain high-pass low-pass white-noise
      triangle constant envelope run-with destination current-time]])

;;defining the browser audio context:
(defonce context (cljs-bach.synthesis/audio-context))

#+END_SRC 
**** TODO look carefully at klangmeister
I am not sure how to arrange the namespaces, Klangmeister might give
me an idea

*** DONE create a multimethod ..
first thing that occured to me is to use cljs-bach builtin `add` to
put together a whole system in one sound I'll start with
frequency. basically:

#+BEGIN_SRC clojure
(defn pings
  [freq1 freq2]
  (connect->
   (add
    (sine freq1)
    (sine freq2)) 
   (gain 0.1)))

(-> (pings 440 420)
    (connect-> destination)
    (run-with context (current-time context)1))

#+END_SRC

That is for two frequencies so first I will need to
create the multimethod.  Then I will see if some orbit
values create anything interesting in any of the
systems.

** functionality

*** DONE toggle the selected system in the menu itself
make a dispatch on click to add the clicked name to :vis
in the db for example.

*** DONE toggle visibility of spheres from system
look into how to toggle within a system, if I do it the
*spheres-rf-ha* way -  it toggles visibility globally and
then a planet that is toggled off in the solar system for example
is toggled off in its own system (might be desired or not...).

*** DONE select attribute to examine

*** DONE flex the function according to attribute and system
perhaps we need a toggle for global and local.. so that
the scale changes/or not when zooming into a system.
-kind of solved it with global for frequency..

*** *THE KEYBOARD*
**** DONE one axis from /spheres-rf-ha/
copied and adjusted the code.

**** DONE add tooltip style data 
when hovering over a sphere-key in the keyboard have
something like "<sphere> distance from <sun> is <so and
so> km "

**** TODO add a keyboard key and a map 
for exaple the home row so something like:

| a     | s         | d       | f       | g      | h        | j        | k        | l         | ;       |
|-------+-----------+---------+---------+--------+----------+----------+----------+-----------+---------|
| "Sun" | "Mercury" | "Venus" | "Earth" | "Mars" | Jupiter" | "Saturn" | "Uranus" | "Neptune" | "Pluto" |
|-------+-----------+---------+---------+--------+----------+----------+----------+-----------+---------|

the letter can just be added to the name in the selected-spheres menu.

***** TODO library keys clojurescript -->> RE-PRESSED
https://github.com/gadfly361/re-pressed

#+BEGIN_SRC clojure 
:dependencies [[org.clojure/clojure "1.8.0"]
                 [org.clojure/clojurescript "1.10.238"]
                 [reagent "0.7.0"]
                 [re-frame "0.10.5"]
                 [garden "1.3.5"]
                 [ns-tracker "0.3.1"]
                 [cljs-bach "0.3.0"]
                 [com.cognitect/transit-cljs "0.8.239"]
                 [re-pressed "0.3.0"]] ;<<===THIS ONE


#+END_SRC

the author says:
If you have questions, I can usually be found hanging out in the clojurians #reagent slack channel (my handle is @gadfly361).

***** REPRESSED details:

first setup - applying a key ("/")  to global/local toggle

[[https://keycode.info/][keycode list]]

a few useful ones are:

| key   | code |
|-------+------|
| /     |  220 |
| a     |   65 |
| s     |   83 |
| d     |   68 |
| f     |   70 |
| g     |   71 |
| h     |   72 |
| j     |   74 |
| k     |   75 |
| l     |   76 |
| ;     |  186 |
| <ret> |   13 |
|       |      |

need to setup once a listener:
#+BEGIN_SRC clojure

(re-frame/dispatch-sync [::rp/add-keyboard-event-listener "keydown"])

#+END_SRC
 
Then for example with the </> key dispatching the
:toggle-global event (with and without <shift>,
followed by a double <tab> to dispatch the same..

#+BEGIN_SRC clojure
(dispatch
 [::rp/set-keydown-rules
  :event-keys [[:toggle-global]
               [{:keyCode 220}]
               [{:keyCode 220
                 :shiftKey true}]]
  [:toggle-global]
  [{:keyCode 9} {:keyCode 9}]]]
#+END_SRC

***** TODO how to map the keys for spheres
Need to find a way that not only we interactively
map the home row keys to the active visible
spheres by order from left to right, but also to
show each clock by lighting the corresponding
sphere in the [graph].

****** the problem
the keys are listening to event. how to design an event that will assign the keys so that this way of calling the event will work.


*** TODO make the gain slider do something...

*** TODO add envelope [3/6]
- [X] add a note function that takes [adshr]
- [X] add a chord function that does the same.
- [X] update the events and views
- [ ] a graphic representation
- [ ] a spec
- [ ] how to manipulate the graph?

input from user [adshr] 

*** Sliders for range of frequency - Major important for instrument usefulness

**** VIEWS
*sliders* element, It takes frequency range and rate
 that is something like this psuedo example:

#+BEGIN_SRC clojure
(defn interpolate [x]
  (let [selected-attr @(subscribe [::subs/selected-attr])
        spheres (subscribe [::subs/spheres])
        sorted-spheres (subscribe [::subs/sorted-spheres])
        global @(subscribe [::subs/global])
        y-range (subscribe [::subs/freq-range])
        y-1 (:min @y-range)
        y-2 (:max @y-range)
        x-1-global (apply min (map selected-attr @spheres))
        x-1-local (apply min (map selected-attr @sorted-spheres))
        x-2-global (apply max (map selected-attr @spheres))
        x-2-local (apply max (map selected-attr @sorted-spheres))]
    (if global
      (+ y-1 (* (- y-2 y-1) (/ (- x x-1-global) (- x-2-global x-1-global))))
      (+ y-1 (* (- y-2 y-1) (/ (- x x-1-local) (- x-2-local x-1-local)))))
    ))

#+END_SRC

I need to minimize the views so all the logic happens in
/events/ and /cofx/.

**** SUBS
At the moment all the flow happens in the /calc-freq-rate/:
#+BEGIN_SRC clojure
(reg-sub
 ::calc-freq-rate
 :<- [::spheres]
 :<- [::sorted-spheres]
 :<- [::global]
 :<- [::selected-attr]
 :<- [::freq-range]
 (fn [[spheres sorted-spheres global attr freq-range] _]
   (if global
     (let [high-point (apply max (map attr spheres))
           low-point (apply min (map attr spheres))
           range (- (:max freq-range) (:min freq-range))]
       (/ (- high-point low-point) range));the freq-range is what's audiable in hz.

     (let [high-point (apply max (map attr sorted-spheres))
           low-point (apply min (map attr sorted-spheres))
           range (- (:max freq-range) (:min freq-range))]
       (/ (- high-point low-point) range))) 
   ))

#+END_SRC

The problem is that these dependencies doesn't happen
necessarily in the right order..  The solution will be
in dispatching an event that calls :dispatch on coefx
that I have to define.


**** EVENTS

At the moment the dispatch is simple. I need to extend
and create coefx for what I rely on in several
dispatches.  The idea is that the db has to update
entirely when a parameter is changed before it executes
the /:audio/ event.

For debugging I should add the frequency's value to the
tooltip displayed with every /:audio/ dispatch.

** transit-cljs

*** TODO converting to edn or json and back

** visual design
*** DONE representation of the elements

glowing spheres

*** DONE the page look

dark bg, retro glow.

*** DONE some sort of scratch board where hovering will change the sounds.

perhaps the spheres themselves activated by hover or
some design of a visual instrument

*** TODO the green outline light on spheres in the systems-box should stay on for a selected system. 

*** DONE possible do it all a bit more concise so it will fit on the screen 

less padding on the instruction (:.guide)

*** TODO improve satelites representation inthe selected-spheres-box

now that the selected system parent looks better I
better improve the satelites that are only little white
circles at the moment

** data structure

generally there's an hirarchy of systems -> a system ->
sphere -> its attributes.

*** DONE add the synth's attributes to db

this way it could be accessed from the app by subscriptions.
- I could have a slider for the gain.
- The envelope could be graphically represented too... movable element

** sound and the data - relations

*** TODO how does each attribute relate to sound:

- If I represent the values as frequency, the greater
numbers are higher tones.. is that right?
a bigger planet is a higher note?


** ISSUES

*** TODO Throws a :
/re-frame: no handler registered for effect: {:input nil, :output nil} . Ignoring./
on every dispatch of :audio/
#+BEGIN_SRC clojure
(reg-event-fx
 :audio
 (fn [cofx [_ v]]
   (map dings v)))
#+END_SRC

perhaps has to do with cofx? routing the side effect to somewhere..

*** TODO adshr needs a spec

*** TODO frequency not consistent... there's some mistake somewhere

**** DEBUGGING
1) go through all functions that have to do with interpolation
2) move all those functions to subscription and events.
3) minimise. there are some repetitions - design fault ones.


** NEW FEATURES 

*Looking to add something I didn't try before*

- auth -a `buddy` chapter on Lambda Island [[https://lambdaisland.com/episodes/buddy-authentication][here!]]
- tests [[https://lambdaisland.com/episodes/introduction-clojure-testing][lambdaisland tests intro]] and [[https://lambdaisland.com/episodes/testing-clojurescript][lambdaisland cljs tests]] and [[https://lambdaisland.com/episodes/acceptance-testing-sparkledriver][also this]] and lastly [[https://lambdaisland.com/episodes/generative-testing-clojure-test-check][this.]]

*** when moving to fullstack (from vemv discussion on Slack):
vemv   [Feb 6th at 7:32 PM]
anyone using clojurescript + CIDER + figwheel + one of [component, integrant]?

I'm interested in the Component part, never tried such a setup. I suspect it could be more robust.

does it work fine? any rough edges? I would imagine reconnection can be an issue as you `reset` your Component system (edited)
30 replies

vemv   [7 days ago]
_Maybe_ resetting the sockets on every `reset` would be a recipe for disaster... so my Component could just not do that

an useful thing that could be done on `reset` is clearing the cljs compiler cache and such... it can get unrecoverably corrupt as one switches Git branches

andrea.crotti   [7 days ago]
I use figwheel main cider and integrant

andrea.crotti   [7 days ago]
And to be fair I rarely restart anything integrant just brings the system up

andrea.crotti   [7 days ago]
But everything works pretty well anyway

vemv   [7 days ago]
is it a full-stack or frontend-only project?

andrea.crotti   [7 days ago]
full stack

andrea.crotti   [7 days ago]
you just need things like

```(defmethod ig/init-key :server/figwheel [_ {:keys [build] :as opts}]
  (log/info "Running figwheel build " build)
  (figwheel/start {:mode :serve} build))```

andrea.crotti   [7 days ago]
and something like
```(defmethod ig/init-key :server/jetty [_ {:keys [port host reload?]}]
  (let [handler
        (if reload?
          (wrap-reload #'server/app-handler)
          server/app-handler)]

    (log/info "Running Jetty with auto reloading = " reload?)
    (jetty/run-jetty handler {:join? false
                              :host (or host "127.0.0.1")
                              :port port})))

(defmethod ig/halt-key! :server/jetty [_ server]
  (.stop server))```

andrea.crotti   [7 days ago]
for jetty for example

andrea.crotti   [7 days ago]
it's quite easy to do

andrea.crotti   [7 days ago]
we also have nrepl and sass compilation there

vemv   [7 days ago]
thanks so far! does emacs connect to your figwheel or nrepl component?

vemv   [7 days ago]
(for the clojurescript part)

andrea.crotti   [7 days ago]
no actually the figwheel in integrant bit is only used when running outside of Emacs

andrea.crotti   [7 days ago]
inside Emacs we still use the rest of the stuff, but figwheel main is started by Cider itself

andrea.crotti   [7 days ago]
there is just some code in `user.clj` to start the rest of the integrant shebang

vemv   [7 days ago]
ah damn... that was the part that interested me the most :slightly_smiling_face:

andrea.crotti   [7 days ago]
well it's one line

andrea.crotti   [7 days ago]
(ig.repl/set-prep! (constantly dev-config))

andrea.crotti   [7 days ago]
and then if you import this
[integrant.repl :as ig.repl :refer [clear go halt init reset reset-all]]

andrea.crotti   [7 days ago]
you just have to type `(go)` in your Clj repl

andrea.crotti   [7 days ago]
I can't share the actual code because it's from work but I'll add something similar now to my own OSS project which I can instead share (edited)

andrea.crotti   [7 days ago]
@vemv https://github.com/AndreaCrotti/elo/pull/140
AndreaCrotti
#140 add user file and set up correctly
Comments
1
AndreaCrotti/eloFeb 6thAdded by GitHub

andrea.crotti   [7 days ago]
just got it working on one of my personal projects

andrea.crotti   [7 days ago]
integrant is really just handling jetty when you start with Emacs

vemv   [7 days ago]
hey! hmmm, let me make sure... I was talking about `figwheel main is started by Cider itself`... that's the part I'm trying to avoid

the goal is having all the "server side" (figwheel, nrepl etc) inside Integrant. So emacs becomes a thin client

andrea.crotti   [7 days ago]
well you can probably do that but don't want you want a cljs repl?

andrea.crotti   [7 days ago]
you can start everything with integrant and do cider-connect into a running nrepl

andrea.crotti   [7 days ago]
but I'm not sure if cljs would work though

vemv   [7 days ago]
yeah that's what I'm curious about... particularly when the "figwheel component" is subject to restarts
